{"version":3,"sources":["reducers/characterReducer.js","reducers/counterReducer.js","reducers/todoReducer.js","reducers/rootReducer.js","views/SimpleCounter.js","components/TodoItem.js","views/TodoList.js","components/EditNameCard.js","views/NameCard.js","App.js","serviceWorker.js","index.js"],"names":["initState","name","occupation","age","characterReducer","state","action","type","payload","counter","counterReducer","todoList","id","content","todoReducer","rootReducer","combineReducers","characters","myCounter","todos","SimpleCounter","useSelector","dispatch","useDispatch","className","onClick","TodoItem","props","key","item","todoId","newTodoList","filter","removeTodoItem","TodoList","useState","inputTodo","setInputTodo","errMsg","setErrMsg","length","map","onChange","e","target","value","placeholder","htmlFor","trim","newTodoObject","Math","random","EditNameCard","person","NameCard","isEdit","setEdit","App","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fc11571.chunk.js","sourcesContent":["//Reducer for character information Initialize State\r\nconst initState = {\r\n    name: \"Sunny Xue\",\r\n    occupation: \"Ninja\",\r\n    age: 16\r\n}\r\n\r\n//Define Actions\r\nconst characterReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n            //Change character name\r\n        case 'CHANGE_NAME':\r\n            return {\r\n                ...state,\r\n                name: action.payload\r\n            }\r\n\r\n        case 'CHANGE_OCCUPATION':\r\n            return {\r\n                ...state,\r\n                occupation: action.payload\r\n            }\r\n        case 'CHANGE_AGE':\r\n            return {\r\n                ...state,\r\n                age: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default characterReducer;","const initState = {\r\n    counter: 5,\r\n }\r\n \r\n const counterReducer = (state = initState, action) => {\r\n     switch (action.type) {\r\n       case 'INCREMENT_COUNT':\r\n         return {...state,\r\n                 counter:state.counter+1      \r\n         }\r\n       case 'INCREMENT_COUNT_TEN':\r\n            return {...state,\r\n                    counter:state.counter+10      \r\n            }\r\n\r\n        case 'DOUBLE_COUNT':\r\n            return {...state,\r\n                    counter:state.counter*2      \r\n            }\r\n      case 'DECREMENT_COUNT_TEN':\r\n          return {...state,\r\n                  counter:state.counter-10      \r\n        }\r\n       case 'DECREMENT_COUNT':\r\n           return {...state,\r\n             counter:state.counter-1      \r\n     }\r\n       case 'RESET_COUNT':\r\n           return {...state,\r\n             counter:0     \r\n     } \r\n       default:\r\n         return state\r\n     }\r\n   }\r\n \r\n export default counterReducer;","const initState = {\r\n    todoList: [\r\n        {\r\n            id: 1,\r\n            content: 'Play video game'\r\n        }, {\r\n            id: 2,\r\n            content: 'Learn nodejs & python'\r\n        }, {\r\n            id: 3,\r\n            content: 'Join meetup event'\r\n        }\r\n    ]\r\n}\r\n\r\nconst todoReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_TODO':\r\n            return {\r\n                ...state,\r\n                todoList: [\r\n                    ...state.todoList,\r\n                    action.payload\r\n                ]\r\n            }\r\n        case 'REMOVE_TODO':\r\n            return {\r\n                ...state,\r\n                todoList: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default todoReducer;","import characterReducer from './characterReducer';\r\nimport counterReducer from './counterReducer';\r\nimport todoReducer from './todoReducer';\r\nimport {combineReducers} from 'redux';\r\n\r\n//Combine all the sub reducers\r\nconst rootReducer = combineReducers({\r\n    characters: characterReducer,\r\n    myCounter: counterReducer,\r\n    todos:todoReducer\r\n})\r\n\r\nexport default rootReducer","import React from 'react';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\n\r\nconst SimpleCounter = () => {\r\n  //Get counter from counterReducer\r\n  const counter = useSelector(state => state.myCounter.counter);\r\n  \r\n  //Use for all the dispatch actions\r\n  const dispatch = useDispatch();\r\n\r\n    return (         \r\n        <section id=\"section-counter\">\r\n        <h3 className=\"center-align white-text blue\">Simple Counter</h3>\r\n        <h5 className=\"center-align\">{counter}</h5>\r\n        <div className=\"row counter-btns\">\r\n        <button className=\"btn-small blue\" onClick={() => dispatch({ type: 'DOUBLE_COUNT' })}>\r\n        x2\r\n        </button>\r\n        <button className=\"btn-small blue\" onClick={() => dispatch({ type: 'INCREMENT_COUNT_TEN' })}>\r\n        +10\r\n        </button>\r\n        <button className=\"btn-small blue\" onClick={() => dispatch({ type: 'INCREMENT_COUNT' })}>\r\n        +1\r\n        </button>\r\n        <button className=\"btn-small blue\" onClick={() => dispatch({ type: 'DECREMENT_COUNT' })}>\r\n        -1\r\n        </button>\r\n        <button className=\"btn-small blue\" onClick={() => dispatch({ type: 'DECREMENT_COUNT_TEN' })}>\r\n        -10\r\n        </button>\r\n        <button className=\"btn-small blue\" onClick={() => dispatch({ type: 'RESET_COUNT' })}>\r\n        Reset\r\n        </button>\r\n        </div>\r\n     \r\n        </section>\r\n     );\r\n}\r\n \r\nexport default SimpleCounter;","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\n//Single todo item component\r\nconst TodoItem = (props) => {\r\n    //Get todoList from todoReducer\r\n    const todoList = useSelector(state => state.todos.todoList)\r\n    //Use for all the dispatch actions\r\n    const dispatch = useDispatch();\r\n\r\n    //Remove single todo in the list\r\n    const removeTodoItem = (todoId) => {\r\n        //filter to get the todoId which need to be remove\r\n        let newTodoList = todoList.filter(item => item.id !== todoId);\r\n        dispatch({type: 'REMOVE_TODO', payload: newTodoList})\r\n\r\n    }\r\n\r\n    return (\r\n        <li className=\"collection-item\" key={props.item.id}>{props.item.content}\r\n            <span\r\n                onClick={() => {\r\n                removeTodoItem(props.item.id)\r\n            }}\r\n                className=\"secondary-content\">\r\n                <i className=\"remove-btn material-icons blue-text\">clear</i>\r\n            </span>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default TodoItem;","import React,{useState} from 'react';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport TodoItem from '../components/TodoItem';\r\n\r\n\r\nconst TodoList = () => {\r\n\r\n  //#2 Used to get a single attribute or object inside the Reducer\r\n\r\n  //Get todoList from todoReducer\r\n  const todoList = useSelector(state => state.todos.todoList);\r\n\r\n  //Use for all the dispatch actions\r\n  const dispatch = useDispatch();\r\n\r\n  //Local state for the input\r\n  const [inputTodo,setInputTodo] =  useState('');\r\n  //Local state for the input error message\r\n  const [errMsg,setErrMsg] = useState('');\r\n\r\n  //Handle onChange event\r\n  const handleInput = (e)=>{\r\n    setInputTodo(e.target.value);\r\n  }\r\n\r\n  //Handle onClick event\r\n  const addNewTodo = ()=>{\r\n    //Valid input value\r\n    if(inputTodo.trim().length>1)\r\n    {   \r\n        setErrMsg('');\r\n        let newTodoObject={\r\n            id: Math.random(),\r\n            content:inputTodo\r\n        }\r\n         //Add new todo item into List with the action\r\n        dispatch({type:'ADD_TODO',payload:newTodoObject});\r\n        //Empty input \r\n        setInputTodo('');\r\n    }\r\n    else{\r\n        //Display Error message\r\n        setErrMsg('Please input something...');\r\n    }\r\n\r\n   \r\n  }\r\n\r\n    return (    \r\n        <section id=\"section-todo\">\r\n        <h3 className=\"center-align white-text blue\">Todo List</h3>\r\n        {\r\n            todoList.length>0?\r\n            (<ul className=\"collection\">\r\n            {\r\n              todoList.map(item => {\r\n                return <TodoItem key={item.id} item={item} />\r\n              })\r\n            }\r\n          </ul>):\r\n          (<p className=\"center-align\">You don't have anything to do! Awesome!</p>)\r\n        }\r\n       \r\n        <div className=\"row\">\r\n        <p className=\"red-text err-msg col s12 center-align\">\r\n        {errMsg}\r\n        </p>\r\n        <div className=\"input-field col s10\">\r\n        <input onChange={handleInput} value={inputTodo} placeholder=\"Add todo...\" id=\"todo-input\" type=\"text\" />\r\n        <label htmlFor=\"todo-input\" className=\"active\">New Todo</label>\r\n        </div>\r\n      \r\n        <button className=\"btn col s2 blue\" onClick={addNewTodo} >Add</button>\r\n        </div>\r\n      </section>\r\n      );\r\n}\r\n \r\nexport default TodoList;","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nconst EditNameCard = () => {\r\n    //Get the whole state from characterReducer\r\n    const person = useSelector(state => state.characters);\r\n\r\n    //Use for all the dispatch actions\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"row\">\r\n                <div className=\"input-field col s4\">\r\n                    <input\r\n                        value={person.name}\r\n                        id=\"name\"\r\n                        type=\"text\"\r\n                        onChange={e => dispatch({type: 'CHANGE_NAME', payload: e.target.value})}/>\r\n                    <label htmlFor=\"name\" className=\"active\">Name</label>\r\n                </div>\r\n                <div className=\"input-field col s4\">\r\n                    <input\r\n                        value={person.occupation}\r\n                        id=\"occupation\"\r\n                        type=\"text\"\r\n                        onChange={e => dispatch({type: 'CHANGE_OCCUPATION', payload: e.target.value})}/>\r\n                    <label htmlFor=\"occupation\" className=\"active\">Occupation</label>\r\n                </div>\r\n                <div className=\"input-field col s4\">\r\n                    <input\r\n                        value={person.age}\r\n                        id=\"age\"\r\n                        type=\"number\"\r\n                        onChange={e => dispatch({type: 'CHANGE_AGE', payload: e.target.value})}/>\r\n                    <label htmlFor=\"age\" className=\"active\">Age</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditNameCard;","import React, {useState} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport EditNameCard from '../components/EditNameCard';\r\n\r\nconst NameCard = () => {\r\n\r\n    // useSelector function for getting the specific reducer we need Used to get the\r\n    // whole reducer object like getting characterReducer Get the whole state from\r\n    // characterReducer\r\n    const person = useSelector(state => state.characters);\r\n\r\n    //Create local state for trigger edit form\r\n    const [isEdit,\r\n        setEdit] = useState(false);\r\n\r\n    //Handle edit button onclick in name card\r\n    const toggleEditBtn = () => {\r\n        setEdit(!isEdit);\r\n    }\r\n\r\n    return (\r\n        <section id=\"section-namecard\">\r\n            <h3 className=\"center-align white-text blue\">Name Card</h3>\r\n            <div className=\"card grey darken-1 namecard\">\r\n                <div className=\"card-content white-text\">\r\n                    <p className=\"card-title\">{person.name}</p>\r\n                    <p>Occupation: {person.occupation}</p>\r\n                    <p>Age: {person.age}</p>\r\n                    <button\r\n                        onClick={toggleEditBtn}\r\n                        className=\"btn-floating halfway-fab waves-effect waves-light orange\">\r\n                        {isEdit\r\n                            ? (\r\n                                <i className=\"material-icons\">clear</i>\r\n                            )\r\n                            : (\r\n                                <i className=\"material-icons\">create</i>\r\n                            )\r\n}</button>\r\n                </div>\r\n            </div>\r\n            {isEdit && <EditNameCard/>\r\n}\r\n\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default NameCard;","import React from 'react';\r\nimport SimpleCounter from './views/SimpleCounter';\r\nimport TodoList from './views/TodoList';\r\nimport NameCard from './views/NameCard';\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <main className=\"container\">\r\n\r\n                {/* Please check /views/SimpleCounter.js for detail*/}\r\n                <SimpleCounter/>\r\n\r\n                <div className=\"divider\"></div>\r\n\r\n                {/* Please check /views/NameCard.js for detail*/}\r\n                <NameCard/>\r\n\r\n                <div className=\"divider\"></div>\r\n\r\n                {/* Please check /views/TodoList.js for detail*/}\r\n                <TodoList/>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}